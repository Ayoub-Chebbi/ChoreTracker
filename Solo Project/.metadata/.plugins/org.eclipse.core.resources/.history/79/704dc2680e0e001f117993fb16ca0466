package com.example.beltExam.Controllers;

import com.example.beltExam.Models.Course;
import com.example.beltExam.Models.LoginUser;
import com.example.beltExam.Models.User;
import com.example.beltExam.Services.CourseService;
import com.example.beltExam.Services.UserService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
public class MainController {

    @Autowired
    private UserService userService;

    @Autowired
    private CourseService courseService;

    private boolean isLoggedIn(HttpSession session) {
        Long userId = (Long) session.getAttribute("userId");
        return userId != null;
    }

    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("newUser", new User());
        model.addAttribute("newLogin", new LoginUser());
        return "index.jsp";
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @ModelAttribute("newUser") User newUser,
                           BindingResult result, Model model, HttpSession session) {

        User response = userService.register(newUser, result);

        if (result.hasErrors()) {
            model.addAttribute("newLogin", new LoginUser());
            return ResponseEntity.badRequest().build();
        }

        session.setAttribute("userId", newUser.getId());

        return ResponseEntity.status(HttpStatus.CREATED).build();
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @ModelAttribute("newLogin") LoginUser newLogin,
                        BindingResult result, Model model, HttpSession session) {

        User response = userService.login(newLogin, result);

        if (result.hasErrors()) {
            model.addAttribute("newUser", new User());
            return ResponseEntity.badRequest().build();
        }

        User user = (User) response.getBody();
        session.setAttribute("userId", user.getId());

        return ResponseEntity.status(HttpStatus.OK).build();
    }

    @GetMapping("/logout")
    public ResponseEntity<?> logout(HttpSession session) {
        session.setAttribute("userId", null);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/classes")
    public ResponseEntity<?> welcome(Model model, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        Long userId = (Long) session.getAttribute("userId");
        User user = userService.findById(userId);
        List<Course> courses = courseService.getAllCoursesWithInstructor();
        model.addAttribute("user", user);
        model.addAttribute("courses", courses);
        return ResponseEntity.ok().build();
    }

    // Course related mappings

    @GetMapping("/classes/new")
    public ResponseEntity<?> showNewCourseForm(Model model, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        model.addAttribute("course", new Course());
        return ResponseEntity.ok().build();
    }

    @PostMapping("/classes/new")
    public ResponseEntity<?> saveCourse(@Valid @ModelAttribute("course") Course course,
                             BindingResult bindingResult, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        if (bindingResult.hasErrors()) {
            return ResponseEntity.badRequest().build();
        }
        User instructor = userService.findById((Long) session.getAttribute("userId"));
        course.setInstructor(instructor);
        courseService.saveCourse(course);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }

    @GetMapping("/classes/{id}/edit")
    public ResponseEntity<?> showEditCourseForm(@PathVariable("id") Long id, Model model, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        Course course = courseService.getCourseById(id).orElse(null);
        if (course == null) {
            return ResponseEntity.notFound().build();
        }
        User instructor = userService.findById(course.getInstructor().getId());
        model.addAttribute("course", course);
        model.addAttribute("instructor", instructor);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/classes/{id}/edit")
    public ResponseEntity<?> updateCourse(@PathVariable("id") Long id,
                               @Valid @ModelAttribute("course") Course course,
                               BindingResult bindingResult, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        if (bindingResult.hasErrors()) {
            return ResponseEntity.badRequest().build();
        }
        course.setId(id);
        courseService.saveCourse(course);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/classes/{id}/delete")
    public ResponseEntity<?> deleteCourse(@PathVariable("id") Long id, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        courseService.deleteCourse(id);
        return ResponseEntity.ok().build();
    }

    @GetMapping("/classes/{id}")
    public ResponseEntity<?> showCourseDetails(@PathVariable("id") Long id, Model model, HttpSession session) {
        if (!isLoggedIn(session)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        Course course = courseService.getCourseById(id).orElse(null);
        if (course == null) {
            return ResponseEntity.notFound().build();
        }
        model.addAttribute("course", course);
        return ResponseEntity.ok().build();
    }
}
